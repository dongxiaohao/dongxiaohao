package graph_test;


import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.Integer;
import java.util.*;
import io_test.*;

import lables.lables;
public class query_graph {
		public int[][] query_matrix;
		public List<Integer> seq;
		public lables query_lable;
		
//	 public static void main(String[] args) throws Exception {
//		   int[][] t=new int[5][5];
//		   List<Integer> seq=new ArrayList<>();
//		   String path="D:\\学习\\kou_exp\\查询子图\\test_1.txt";
//	       init_zhitu(t,path);
//	       for(int i=0;i<t.length;i++) {
//	    	   for(int j=0;j<t.length;j++)
//	    		   System.out.print(t[i][j]+" ");
//	    	   System.out.println();
//	       }
//	       
//	       CFL(t,seq);
//	       for(int i:seq)
//	       System.out.print(i+" ");
//
//	    }
	 public query_graph(int scale,int count) {
		 this.query_matrix=new int[scale][scale];
		 this.seq=new ArrayList<>();
		 this.query_lable=new lables(scale,count);
	 }
	 
	 //初始化查询子图
	public void init_zhitu(String path) throws Exception {
		  File file = new File(path);   
		  BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));    
		  BufferedReader reader = new BufferedReader(new InputStreamReader(fis,"utf-8"),5*1024*1024);// 用5M的缓冲读取文本文件  
		  String line = "";
		  int row=0,colume=0;
		  while((line = reader.readLine()) != null) {
			  colume=0;
			  //设置初始值
			  int l_flag=0,r_flag=1;
			  line=line.trim();
			  int len=line.length();
			  while(r_flag<=len){
				  String mem;;
				  //分情况读取数字
				  if(r_flag<len-1)
					  mem=line.substring(l_flag, r_flag); 
				  else 
					  mem=line.substring(l_flag); 
				  this.query_matrix[row][colume]=Integer.valueOf(mem.trim()).intValue();	//存入数组
				  colume++;		// 移动对应列
				  l_flag+=2;	//移动至下一个数字
				  r_flag+=2;	//移动至下一个空格
				  
			  }
			  row++;			//行数增加
				
		  }
		  fis.close();
		  
	  }
	  
	  
	  //CFL 分解
	  public void CFL(){
		  LinkedHashSet<Integer> s=new LinkedHashSet<>();
		  List<Integer> l=new ArrayList<>();
		  int scale=this.query_matrix.length;
		  int[][] n_m=new int[scale][scale];
		  int flag=0;
		  for(int i=0;i<scale;i++)
	        	for(int j=0;j<scale;j++)
	        		n_m[i][j]=this.query_matrix[i][j];
		  //筛选出叶子和森林节点 并加入链表l
		  while(flag==0)
		  {
			  flag=1;
			  for(int i=0;i<scale;i++) {
				  int count=0;
				  for(int j=0;j<scale;j++) {
					  if(n_m[i][j]!=0) count++;
				  }
				  if(count==1) {
					  flag=0;
					  l.add(i);
				  }
			  }
			  for(int i:l)
			  for(int m=0;m<scale;m++) {
				  n_m[i][m]=0;
				  n_m[m][i]=0;
			  }
		  }
		  //将第一个核心节点加入集合 添加度最小的类型节点
		  int min_node=0,min_degree=Integer.MAX_VALUE;
		  for(int i=0;i<scale;i++) {
			  for(int j=0;j<scale;j++) {
				  if(n_m[i][j]!=0) {												//寻找到度不为零的节点
					  int pre_lable=this.query_lable.getlable(i);					//得到当前节点的标签
					  if(big_test01.graph_lable.lable_count[pre_lable]<min_degree) {		//判断大图中对应类型的节点是否为当前最小
						  min_degree=big_test01.graph_lable.lable_count[pre_lable];
						  min_node=i;
					  }
					  break;						//跳出当前循环
				  }
			  }
		  }
		  s.add(min_node); 			//
		  //进行深度优先遍历,为防止相同节点存入 故使用set
		  for(int a=0;a<s.size();a++) {
			  String str=s.toString();			//将集合转化为字符串
			  int mem=str.charAt(a*3+1)-'0';	//选找到对应位的节点编号
			  //System.out.println(str+"   "+str.charAt(a*3+1)+"  "+mem);
			  for(int i=0;i<n_m.length;i++) 	//对当前节点编号进行遍历
				  if(n_m[i][mem]!=0) {
			   //  System.out.print(n_m[i][mem]+" ");
					  s.add(i);	//
				  	  
			  }
		  }
		  //加入叶子和森林节点
		  for(int a:s)
		       this.seq.add(a);
		  for(int i=l.size()-1;i>=0;i--) {
			  this.seq.add(l.get(i));
		  }
		    
	  }
	  public void printseq() {
		  for(int i:this.seq)
			  System.out.print(i+" ");
		  System.out.println();
	  }
	  public void printquery_matrix() {
		 for(int i=0;i<this.query_matrix.length;i++) {
			 for(int j=0;j<this.query_matrix.length;j++)
				 System.out.print(this.query_matrix[i][j]+" ");
			 System.out.println();
		 }
	  }

}
