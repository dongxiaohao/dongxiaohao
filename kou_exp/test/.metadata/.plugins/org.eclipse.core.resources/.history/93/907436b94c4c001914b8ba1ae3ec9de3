package com.teamformation.utilities;

import java.io.Closeable;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

/**
 * This is referenced from vanillajava blog by Peter Lawrey. This is used for
 * storing sub graphs of different entities like actor-director, director-genre,
 * actor-genre
 * *这是由Peter Lawrey的vanillajava
 * *博客引用的.这用于存储不同实体的子图,如演员导演,导演类型,演员类型
 */
  
public class LargeMatrix implements Closeable {
	private static final int MAPPING_SIZE = 1 << 30;
	private final RandomAccessFile raf;
	private final int width;
	private final int height;
	private final List<MappedByteBuffer> mappings = new ArrayList<MappedByteBuffer>();

	public LargeMatrix(String filename, int width, int height)
			throws IOException {
		this.raf = new RandomAccessFile(filename, "rw");
		try {
			this.width = width;
			this.height = height;
			long size = 8L * width * height;
			for (long offset = 0; offset < size; offset += MAPPING_SIZE) {
				long size2 = Math.min(size - offset, MAPPING_SIZE);
				mappings.add(raf.getChannel().map(
						FileChannel.MapMode.READ_WRITE, offset, size2));
			}
		} catch (IOException e) {
			raf.close();
			throw e;
		}
	}

	protected long position(int x, int y) {
		return (long) y * width + x;
	}

	public int width() {
		return width;
	}

	public int height() {
		return height;
	}

	public double get(int x, int y) {
		assert x >= 0 && x < width;
		assert y >= 0 && y < height;
		long p = position(x, y) * 8;
		int mapN = (int) (p / MAPPING_SIZE);
		int offN = (int) (p % MAPPING_SIZE);
		return ((ByteBuffer) mappings.get(mapN)).getDouble(offN);
	}

	public void set(int x, int y, double d) {
		assert x >= 0 && x < width;
		assert y >= 0 && y < height;
		long p = position(x, y) * 8;
		int mapN = (int) (p / MAPPING_SIZE);
		int offN = (int) (p % MAPPING_SIZE);
		((ByteBuffer) mappings.get(mapN)).putDouble(offN, d);
	}

	public void close() throws IOException {
		mappings.clear();
		raf.close();
	}
}
