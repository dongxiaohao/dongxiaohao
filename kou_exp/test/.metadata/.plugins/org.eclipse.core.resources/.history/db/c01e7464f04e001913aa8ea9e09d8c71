package rest;


import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.Integer;
import java.util.*;

public class test {
	
	 public static void main(String[] args) throws Exception {
		   int[][] t=new int[30][30];
		   List<Integer> seq=new ArrayList<>();
		   String path="D:\\学习\\kou_exp\\查询子图\\test_1.txt";
	       init_zhitu(t,path);
	       CFL(t,seq);
	       for(int i:seq)
	    	   System.out.print(i+" ");

	    }
	 
	 //初始化查询子图
	 
	  public static void init_zhitu(int[][] t,String path) throws Exception {
		  File file = new File(path);   
		  BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));    
		  BufferedReader reader = new BufferedReader(new InputStreamReader(fis,"utf-8"),5*1024*1024);// 用5M的缓冲读取文本文件  
		  String line = "";
		  int row=0,colume=0;
		  while((line = reader.readLine()) != null) {
			  colume=0;
			  int l_flag=0,r_flag=0;
			  line=line.trim();
			  int len=line.length();
			  while(l_flag<len){
				if(line.charAt(r_flag)==' ') {
					t[row][colume]=Integer.valueOf(line.substring(l_flag, r_flag)).intValue();
					colume++;
					l_flag=r_flag+1;
				}else if(r_flag==len-1){
					t[row][colume]=Integer.valueOf(line.substring(l_flag)).intValue();
					l_flag=r_flag+1;
				}else{
					r_flag++;
				}
				  
			  }
			  row++;
				
		  }
		  fis.close();
//		  for(int i=0;i<30;i++)
//	        	for(int j=0;j<i;j++)
//	        		{
//	        		t[i][j]=(int) (Math.random()*2);
//	        		t[j][i]=t[i][j];
//	        		}
//	        for(int i=0;i<30;i++)
//	        { 	
//	        	System.out.println();
//	        	for(int j=0;j<30;j++)
//	        		System.out.print(t[i][j]+" ");
//	        }
		  
	  }
	  
	  
	  //CFL 分解
	  public static void CFL(int[][] mat, List<Integer> sep) {
		  LinkedHashSet<Integer> s=new LinkedHashSet<>();
		  List<Integer> l=new ArrayList<>();
		  int[][] n_m=new int[30][30];
		  int flag=0;
		  for(int i=0;i<30;i++)
	        	for(int j=0;j<30;j++)
	        		n_m[i][j]=mat[i][j];
		  //筛选出叶子和森林节点 并加入链表
		  while(flag==0)
		  {
			  flag=1;
			  for(int i=0;i<30;i++) {
				  int count=0;
				  for(int j=0;j<30;j++) {
					  if(n_m[i][j]!=0) count++;
				  }
				  if(count==1) {
					  flag=0;
					  l.add(i);
				  }
			  }
			  for(int i:l)
			  for(int m=0;m<30;m++) {
				  n_m[i][m]=0;
				  n_m[m][i]=0;
			  }
		  }
		  //将第一个核心节点加入集合 添加度最小的类型节点
		  s.add(4);
		  //进行深度优先遍历
		 
		  for(int a=0;a<s.size();a++)
			  for(int i=0;i<30;i++) 
				  if(n_m[i][a]!=0) {
					  s.add(i);
				  	  
			  }
		  //加入叶子和森林节点
		  for(int a:s)
		       sep.add(a);
		  for(int i=l.size()-1;i>=0;i--) {
			  sep.add(l.get(i));
		  }
		    
	  }
	  

}
